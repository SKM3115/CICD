name: Node.js CI/CD

on:
  push:
    branches:
      - main  # Run this workflow when code is pushed to the "main" branch.

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest version of the Ubuntu runner.

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Action to check out your repository's code.

      - name: Set up Node.js
        uses: actions/setup-node@v2  # Action to set up Node.js environment.
        with:
          node-version: 14  # Specify the Node.js version to use.

      - name: Install dependencies
        run: npm install  # Run a command to install project dependencies.

      - name: Build and test
        run: npm run build && npm test  # Run build and test scripts.

      - name: Start Express.js Server
        run: |
          node -r esm helloworld.js &  # Start the server in the background with the '&' symbol.
        shell: bash

      - name: Wait for Server to Start
        run: sleep 30  # Adjust the sleep duration as needed to allow time for the server to start.

      - name: Test Express.js Server
        run: |
         retries=5
         wait_time=5
    
         for ((i=1; i<=$retries; i++)); do
         if curl -s http://host.docker.internal:8000; then
          echo "Server is running."
         exit 0
         else
         echo "Server is not yet available. Retrying in $wait_time seconds..."
         sleep $wait_time
         fi
         done
    
         echo "Server did not become available after $retries retries."
         exit 1

      - name: Stop Express.js Server
        run: |
          pkill -f "node -r esm app.js"  # Stop the server by finding and killing the process.

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to production
        # Here, you would typically have a deployment step like deploying to a web server or cloud platform.
        run: |
          echo "Deploying to production..."
